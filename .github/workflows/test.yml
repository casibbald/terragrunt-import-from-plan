name: Multi-Provider Import Testing

# Comprehensive testing workflow that:
# 1. Tests both AWS and GCP provider schema generation
# 2. Runs systematic provider initialization with graceful failure handling  
# 3. Generates fresh .terragrunt-provider-schema.json files for both providers
# 4. Executes 87+ comprehensive tests covering core logic and schema-driven intelligence
# 5. Performs dry-run import testing on both provider modules

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  test-import-script:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Set up Shell Test Env
        run: sudo apt-get install -y jq

      - name: Setup terragrunt
        run: |
          wget -q -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.67.16/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Install Just
        uses: extractions/setup-just@v3

      - name: Cargo build
        run: cargo build

      - name: Initialize multi-provider test environment with fresh schemas
        run: |
          # Use our new systematic approach that handles both providers gracefully
          just test-with-fresh-schemas
        env:
          # Set minimal required environment variables for CI
          PROJECT_ID: "ci-test-project"
          REGION: "us-central1"

      - name: Verify provider schemas were generated
        run: |
          echo "üîç Checking for generated provider schemas..."
          if [ -f "envs/simulator/gcp/dev/.terragrunt-provider-schema.json" ]; then
            echo "‚úÖ GCP provider schema exists"
            echo "üìä GCP schema size: $(wc -c < envs/simulator/gcp/dev/.terragrunt-provider-schema.json) bytes"
          else
            echo "‚ö†Ô∏è GCP provider schema not found (expected in CI without GCP credentials)"
          fi
          
          if [ -f "envs/simulator/aws/dev/.terragrunt-provider-schema.json" ]; then
            echo "‚úÖ AWS provider schema exists"
            echo "üìä AWS schema size: $(wc -c < envs/simulator/aws/dev/.terragrunt-provider-schema.json) bytes"
          else
            echo "‚ö†Ô∏è AWS provider schema not found (expected in CI without AWS credentials)"
          fi

      - name: Show comprehensive test results
        run: |
          echo "üß™ Multi-Provider Test Results Summary:"
          echo "========================================"
          
          # Show test counts by category
          cargo test --quiet 2>&1 | grep -E "test result:|running [0-9]+ tests" || true
          
          echo ""
          echo "üìä Schema-driven intelligence test results:"
          cargo test test_schema --quiet -- --nocapture 2>&1 | grep -E "(‚úÖ|‚ö†Ô∏è|üéØ)" || true
          
          echo ""
          echo "üîÑ Multi-provider workflow test results:"
          cargo test test_multi_provider --quiet -- --nocapture 2>&1 | grep -E "(‚úÖ|‚ö†Ô∏è|üéØ)" || true

      - name: Dry run test - GCP modules  
        run: cargo run -- --plan tests/fixtures/gcp/out.json --modules tests/fixtures/gcp/modules.json --module-root simulator/gcp/modules --dry-run --working-directory envs/simulator/gcp/dev

      - name: Dry run test - AWS modules
        run: cargo run -- --plan tests/fixtures/aws/out.json --modules tests/fixtures/aws/modules.json --module-root simulator/aws/modules --dry-run --working-directory envs/simulator/aws/dev
#
#      - name: Run just plan
#        run: just plan
#
#      - name: Run entrypoint test
#        run: |
#          chmod +x entrypoint.sh
#          ./test/entrypoint_test.sh

