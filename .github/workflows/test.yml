name: Multi-Provider Import Testing

# Comprehensive testing workflow that:
# 1. Installs all required tools (Terraform, Terragrunt, Azure CLI, Just)
# 2. Tests AWS, GCP, and Azure provider schema generation with full CLI support
# 3. Runs systematic provider initialization with graceful failure handling  
# 4. Generates fresh .terragrunt-provider-schema.json files for all providers
# 5. Executes 154+ comprehensive tests covering core logic and schema-driven intelligence
# 6. Performs dry-run import testing on all provider modules (AWS, GCP, Azure)

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  test-import-script:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Shell Test Env
        run: sudo apt-get install -y jq

      - name: Setup Terraform and Terragrunt
        run: |
          # Install Terraform and Terragrunt versions that work locally
          echo "Installing Terraform 1.12.2..."
          wget -q -O terraform.zip https://releases.hashicorp.com/terraform/1.12.2/terraform_1.12.2_linux_amd64.zip
          unzip terraform.zip
          chmod +x terraform
          sudo mv terraform /usr/local/bin/
          terraform version
          
          echo "Installing Terragrunt 0.81.0..."
          wget -q -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.81.0/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/
          terragrunt --version

      - name: Install Just
        uses: extractions/setup-just@v3

      - name: Install Azure CLI for Terragrunt
        run: |
          # Install Azure CLI on host system for terragrunt provider authentication
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          echo "‚úÖ Azure CLI installed and available system-wide"
          
      - name: Verify Azure CLI Setup
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "üîß Verifying Azure CLI installation:"
            az version
            echo "‚úÖ Azure CLI verification completed"

      - name: Cargo build
        run: cargo build
        env:
          RUSTFLAGS: "-A unused -A dead_code"

      - name: Initialize multi-provider test environment with fresh schemas
        run: |
          # Use our new systematic approach that handles both providers gracefully
          just test-all
        env:
          # Set minimal required environment variables for CI
          PROJECT_ID: "ci-test-project"
          REGION: "us-central1"
          # Suppress warnings for cleaner CI output
          RUSTFLAGS: "-A unused -A dead_code"
          # Suppress Terraform version check warnings that break Terragrunt parsing
          TF_IN_AUTOMATION: "true"
          CHECKPOINT_DISABLE: "true"

      - name: Verify provider schemas and fixtures were generated
        run: |
          echo "üîç Checking for generated provider schemas..."
          for provider in gcp aws azure; do
            schema_file="envs/simulator/${provider}/dev/.terragrunt-provider-schema.json"
            if [ -f "${schema_file}" ]; then
              echo "‚úÖ ${provider} provider schema exists"
              echo "üìä ${provider} schema size: $(wc -c < ${schema_file}) bytes"
            else
              echo "‚ö†Ô∏è ${provider} provider schema not found (expected in CI without credentials)"
            fi
          done
          
          echo ""
          echo "üîç Checking for generated test fixtures..."
          for provider in aws gcp azure; do
            out_file="tests/fixtures/${provider}/out.json"
            modules_file="tests/fixtures/${provider}/modules.json"
            if [ -f "${out_file}" ] && [ -f "${modules_file}" ]; then
              echo "‚úÖ ${provider} fixtures exist"
              echo "üìä ${provider} out.json size: $(wc -c < ${out_file}) bytes"
              echo "üìä ${provider} modules.json size: $(wc -c < ${modules_file}) bytes"
            else
              echo "‚ö†Ô∏è ${provider} fixtures missing (may be generated during test phase)"
            fi
          done

      - name: Show comprehensive test results
        run: |
          echo "üß™ Multi-Provider Test Results Summary:"
          echo "========================================"
          
          # Show test counts by category
          cargo test --quiet 2>&1 | grep -E "test result:|running [0-9]+ tests" || true
          
          echo ""
          echo "üìä Schema-driven intelligence test results:"
          cargo test test_schema --quiet -- --nocapture 2>&1 | grep -E "(‚úÖ|‚ö†Ô∏è|üéØ)" || true
          
          echo ""
          echo "üîÑ Multi-provider workflow test results:"
          cargo test test_multi_provider --quiet -- --nocapture 2>&1 | grep -E "(‚úÖ|‚ö†Ô∏è|üéØ)" || true
        env:
          RUSTFLAGS: "-A unused -A dead_code"

      - name: Verify fixture generation and run dry-run tests
        run: |
          echo "üîç Verifying fixture files were generated..."
          
          # Check if fixture files exist and show their status
          for provider in aws gcp azure; do
            if [ -f "tests/fixtures/${provider}/out.json" ] && [ -f "tests/fixtures/${provider}/modules.json" ]; then
              echo "‚úÖ ${provider} fixtures exist - running dry-run test"
              cargo run -- --plan tests/fixtures/${provider}/out.json \
                --modules tests/fixtures/${provider}/modules.json \
                --module-root simulator/${provider}/modules \
                --dry-run \
                --working-directory envs/simulator/${provider}/dev || echo "‚ö†Ô∏è ${provider} dry-run test failed (expected in CI without credentials)"
            else
              echo "‚ö†Ô∏è ${provider} fixtures missing - skipping dry-run test (expected in CI without credentials)"
            fi
          done
        env:
          RUSTFLAGS: "-A unused -A dead_code"
          TF_IN_AUTOMATION: "true"
          CHECKPOINT_DISABLE: "true"
