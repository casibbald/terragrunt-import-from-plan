echo "üöÄ Running CI-friendly validation..."
üöÄ Running CI-friendly validation...
AWS_EC2_METADATA_DISABLED=true just validate-all
echo "üåê Running validation for all cloud providers..."
üåê Running validation for all cloud providers...
just validate aws
echo "üîç Running comprehensive validation for aws..."
üîç Running comprehensive validation for aws...
just validate-format aws
echo "üìù Checking Terraform formatting for aws..."
üìù Checking Terraform formatting for aws...
terraform fmt -check -recursive simulator/aws/
just validate-terraform aws
echo "‚úÖ Running terraform validate for aws..."
‚úÖ Running terraform validate for aws...
cd simulator/aws && AWS_EC2_METADATA_DISABLED=true terraform init -backend=false
[0m[1mInitializing modules...[0m
- cloudtrail in modules/cloudtrail
- cloudwatch in modules/cloudwatch
- ecr in modules/ecr
- iam in modules/iam
- kms in modules/kms
- lambda in modules/lambda
- rds in modules/rds
- s3 in modules/s3
- secrets_manager in modules/secrets_manager
- sns in modules/sns
- vpc in modules/vpc
[0m[1mInitializing provider plugins...[0m
- Finding hashicorp/archive versions matching "~> 2.2"...
- Finding hashicorp/aws versions matching "~> 5.0"...
- Finding hashicorp/random versions matching "~> 3.1"...
- Installing hashicorp/archive v2.7.1...
- Installed hashicorp/archive v2.7.1 (signed by HashiCorp)
- Installing hashicorp/aws v5.100.0...
- Installed hashicorp/aws v5.100.0 (signed by HashiCorp)
- Installing hashicorp/random v3.7.2...
- Installed hashicorp/random v3.7.2 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
cd simulator/aws && AWS_EC2_METADATA_DISABLED=true terraform validate
[32m[1mSuccess![0m The configuration is valid.
[0m
just validate gcp  
echo "üîç Running comprehensive validation for gcp..."
üîç Running comprehensive validation for gcp...
just validate-format gcp
echo "üìù Checking Terraform formatting for gcp..."
üìù Checking Terraform formatting for gcp...
terraform fmt -check -recursive simulator/gcp/
just validate-terraform gcp
echo "‚úÖ Running terraform validate for gcp..."
‚úÖ Running terraform validate for gcp...
cd simulator/gcp && AWS_EC2_METADATA_DISABLED=true terraform init -backend=false
[0m[1mInitializing modules...[0m
- artifact_registry in modules/artifact_registry
- bigquery in modules/bigquery
- cloud_functions in modules/cloud_functions
- cloud_run in modules/cloud_run
- cloud_sql in modules/cloud_sql
- composer in modules/composer
- dataproc in modules/dataproc
- enable_apis in modules/enable_apis
- gke in modules/gke
- iam in modules/iam
- kms in modules/kms
- logging in modules/logging
- monitoring in modules/monitoring
- networking in modules/networking
- pubsub in modules/pubsub
- secret_manager in modules/secret_manager
- spanner in modules/spanner
- storage in modules/storage
- workflows in modules/workflows
[0m[1mInitializing provider plugins...[0m
- Finding hashicorp/archive versions matching "~> 2.2"...
- Finding hashicorp/google versions matching "~> 4.0"...
- Finding hashicorp/google-beta versions matching "~> 4.0"...
- Finding hashicorp/random versions matching "~> 3.1"...
- Installing hashicorp/google v4.85.0...
- Installed hashicorp/google v4.85.0 (signed by HashiCorp)
- Installing hashicorp/google-beta v4.85.0...
- Installed hashicorp/google-beta v4.85.0 (signed by HashiCorp)
- Installing hashicorp/random v3.7.2...
- Installed hashicorp/random v3.7.2 (signed by HashiCorp)
- Installing hashicorp/archive v2.7.1...
- Installed hashicorp/archive v2.7.1 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
cd simulator/gcp && AWS_EC2_METADATA_DISABLED=true terraform validate
[32m[1mSuccess![0m The configuration is valid.
[0m
just validate azure
echo "üîç Running comprehensive validation for azure..."
üîç Running comprehensive validation for azure...
just validate-format azure
echo "üìù Checking Terraform formatting for azure..."
üìù Checking Terraform formatting for azure...
terraform fmt -check -recursive simulator/azure/
just validate-terraform azure
echo "‚úÖ Running terraform validate for azure..."
‚úÖ Running terraform validate for azure...
cd simulator/azure && AWS_EC2_METADATA_DISABLED=true terraform init -backend=false
[0m[1mInitializing modules...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/azurerm from the dependency lock file
- Reusing previous version of hashicorp/azuread from the dependency lock file
- Using previously-installed hashicorp/azurerm v3.117.1
- Using previously-installed hashicorp/azuread v2.53.1

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
cd simulator/azure && AWS_EC2_METADATA_DISABLED=true terraform validate
[33m‚ï∑[0m[0m
[33m‚îÇ[0m [0m[1m[33mWarning: [0m[0m[1mDeprecated attribute[0m
[33m‚îÇ[0m [0m
[33m‚îÇ[0m [0m[0m  on modules/cosmos_db/outputs.tf line 52, in output "cosmosdb_connection_strings":
[33m‚îÇ[0m [0m  52:   value       = azurerm_cosmosdb_account.example[4m.connection_strings[0m[0m
[33m‚îÇ[0m [0m
[33m‚îÇ[0m [0mThe attribute "connection_strings" is deprecated. Refer to the provider
[33m‚îÇ[0m [0mdocumentation for details.
[33m‚îÇ[0m [0m
[33m‚îÇ[0m [0m(and 3 more similar warnings elsewhere)
[33m‚ïµ[0m[0m
[33m‚ï∑[0m[0m
[33m‚îÇ[0m [0m[1m[33mWarning: [0m[0m[1mArgument is deprecated[0m
[33m‚îÇ[0m [0m
[33m‚îÇ[0m [0m[0m  with module.storage.azurerm_storage_account.example,
[33m‚îÇ[0m [0m  on modules/storage/main.tf line 11, in resource "azurerm_storage_account" "example":
[33m‚îÇ[0m [0m  11:   enable_https_traffic_only       = [4mtrue[0m[0m
[33m‚îÇ[0m [0m
[33m‚îÇ[0m [0mThe property `enable_https_traffic_only` has been superseded by
[33m‚îÇ[0m [0m`https_traffic_only_enabled` and will be removed in v4.0 of the AzureRM
[33m‚îÇ[0m [0mProvider.
[33m‚ïµ[0m[0m
[32m[1mSuccess![0m The configuration is valid, but there were some
validation warnings as shown above.
[0m
